// Code generated by MockGen. DO NOT EDIT.
// Source: ./ppu.go
//
// Generated by this command:
//
//	mockgen -source ./ppu.go -destination ./mock_ppu/ppu.go -package mock_ppu -typed
//

// Package mock_ppu is a generated GoMock package.
package mock_ppu

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPPU is a mock of PPU interface.
type MockPPU struct {
	ctrl     *gomock.Controller
	recorder *MockPPUMockRecorder
	isgomock struct{}
}

// MockPPUMockRecorder is the mock recorder for MockPPU.
type MockPPUMockRecorder struct {
	mock *MockPPU
}

// NewMockPPU creates a new mock instance.
func NewMockPPU(ctrl *gomock.Controller) *MockPPU {
	mock := &MockPPU{ctrl: ctrl}
	mock.recorder = &MockPPUMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPPU) EXPECT() *MockPPUMockRecorder {
	return m.recorder
}

// IsPPU mocks base method.
func (m *MockPPU) IsPPU() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsPPU")
}

// IsPPU indicates an expected call of IsPPU.
func (mr *MockPPUMockRecorder) IsPPU() *MockPPUIsPPUCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPPU", reflect.TypeOf((*MockPPU)(nil).IsPPU))
	return &MockPPUIsPPUCall{Call: call}
}

// MockPPUIsPPUCall wrap *gomock.Call
type MockPPUIsPPUCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPPUIsPPUCall) Return() *MockPPUIsPPUCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPPUIsPPUCall) Do(f func()) *MockPPUIsPPUCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPPUIsPPUCall) DoAndReturn(f func()) *MockPPUIsPPUCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockPPU) Read(addr uint16) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", addr)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPPUMockRecorder) Read(addr any) *MockPPUReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPPU)(nil).Read), addr)
	return &MockPPUReadCall{Call: call}
}

// MockPPUReadCall wrap *gomock.Call
type MockPPUReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPPUReadCall) Return(arg0 byte, arg1 error) *MockPPUReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPPUReadCall) Do(f func(uint16) (byte, error)) *MockPPUReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPPUReadCall) DoAndReturn(f func(uint16) (byte, error)) *MockPPUReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockPPU) Write(addr uint16, value byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", addr, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockPPUMockRecorder) Write(addr, value any) *MockPPUWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPPU)(nil).Write), addr, value)
	return &MockPPUWriteCall{Call: call}
}

// MockPPUWriteCall wrap *gomock.Call
type MockPPUWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPPUWriteCall) Return(arg0 error) *MockPPUWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPPUWriteCall) Do(f func(uint16, byte) error) *MockPPUWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPPUWriteCall) DoAndReturn(f func(uint16, byte) error) *MockPPUWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
